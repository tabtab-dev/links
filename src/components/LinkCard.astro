---
export interface Props {
  link: {
    data: {
      title: string;
      url: string;
      description?: string;
      category: string;
      icon?: string;
      tags?: string[];
    };
  };
  showCategory?: boolean;
}

const { link, showCategory = true } = Astro.props;

// 获取域名用于显示
const getDomain = (url: string) => {
  try {
    return new URL(url).hostname.replace('www.', '');
  } catch {
    return '';
  }
};

const domain = getDomain(link.data.url);

// 获取首字母作为图标
const getInitialIcon = (text: string) => {
  return text.charAt(0).toUpperCase();
};

// 根据域名生成背景色
const getDomainColor = (hostname: string) => {
  const colors = [
    'from-blue-500 to-blue-600',
    'from-purple-500 to-purple-600',
    'from-green-500 to-green-600',
    'from-red-500 to-red-600',
    'from-yellow-500 to-yellow-600',
    'from-indigo-500 to-indigo-600',
    'from-pink-500 to-pink-600',
    'from-teal-500 to-teal-600',
  ];
  
  let hash = 0;
  for (let i = 0; i < hostname.length; i++) {
    hash = hostname.charCodeAt(i) + ((hash << 5) - hash);
  }
  
  return colors[Math.abs(hash) % colors.length];
};

const gradientColor = getDomainColor(domain);
---

<a 
  href={link.data.url} 
  target="_blank" 
  rel="noopener noreferrer"
  class="group relative block bg-white dark:bg-gray-800 rounded-2xl shadow-sm hover:shadow-2xl border border-gray-100 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-700 transition-all duration-300 transform hover:-translate-y-2 overflow-hidden"
  data-link-data={JSON.stringify(link.data)}
>
  <!-- 悬停背景渐变 -->
  <div class="absolute inset-0 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/10 dark:to-purple-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  
  <!-- 卡片内容 -->
  <div class="relative p-6">
    <!-- 头部区域 -->
    <div class="flex items-start justify-between mb-4">
      <div class="flex items-center">
        <div class={`w-12 h-12 rounded-xl bg-gradient-to-br ${gradientColor} flex items-center justify-center text-white font-bold text-lg shadow-lg group-hover:scale-110 transition-transform duration-300`}>
          {link.data.icon ? (
            <span class="text-xl">{link.data.icon}</span>
          ) : (
            getInitialIcon(link.data.title)
          )}
        </div>
        <div class="flex-1 ml-4">
          <h3 class="text-lg font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200 line-clamp-1">
            {link.data.title}
          </h3>
          {domain && (
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1 flex items-center">
              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"/>
              </svg>
              {domain}
            </p>
          )}
        </div>
      </div>
      
      <!-- 外部链接图标 -->
      <div class="flex-shrink-0">
        <div class="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:translate-x-0 translate-x-2">
          <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- 描述 -->
    {link.data.description && (
      <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2 group-hover:text-gray-700 dark:group-hover:text-gray-200 transition-colors">
        {link.data.description}
      </p>
    )}
    
    <!-- 底部信息 -->
    <div class="flex flex-wrap items-center gap-2">
      <!-- 分类 -->
      {showCategory && (
        <span class="inline-flex items-center px-2.5 py-1 rounded-lg text-xs font-semibold bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 border border-blue-200 dark:border-blue-800">
          {link.data.category}
        </span>
      )}
      
      <!-- 标签 -->
      {link.data.tags && link.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-1">
          {link.data.tags.slice(0, 2).map(tag => (
            <span class="inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 border border-gray-200 dark:border-gray-600">
              #{tag}
            </span>
          ))}
          {link.data.tags.length > 2 && (
            <span class="text-xs text-gray-400 dark:text-gray-500">+{link.data.tags.length - 2}</span>
          )}
        </div>
      )}
    </div>
  </div>
  
  <!-- 悬停指示器 -->
  <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></div>
</a>