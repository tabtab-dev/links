---
---

<button 
  id="theme-toggle"
  type="button"
  class="relative p-2.5 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 hover:shadow-md group"
  aria-label="切换主题"
>
  <!-- 太阳图标 - 亮色主题 -->
  <svg 
    id="sun-icon" 
    class="w-5 h-5 text-yellow-500 dark:hidden transform transition-all duration-300 group-hover:rotate-180" 
    fill="currentColor" 
    viewBox="0 0 24 24"
  >
    <circle cx="12" cy="12" r="5" class="fill-current"/>
    <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
  </svg>
  
  <!-- 月亮图标 - 暗色主题 -->
  <svg 
    id="moon-icon" 
    class="w-5 h-5 text-indigo-400 hidden dark:block transform transition-all duration-300 group-hover:rotate-12" 
    fill="currentColor" 
    viewBox="0 0 24 24"
  >
    <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" class="fill-current"/>
  </svg>
  
  <!-- 切换动画背景 -->
  <div class="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
</button>

<script is:inline>
// 主题切换功能 - 使用is:inline确保脚本正确执行
(function() {
  'use strict';
  
  // 等待DOM加载完成
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (!themeToggle) return;

    const html = document.documentElement;

    // 获取当前主题
    function getCurrentTheme() {
      return localStorage.getItem('theme') || 'light';
    }

    // 设置主题
    function setTheme(theme) {
      if (theme === 'dark') {
        html.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else {
        html.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      }
    }

    // 切换主题
    function toggleTheme() {
      const currentTheme = getCurrentTheme();
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      setTheme(newTheme);
      
      // 添加点击动画效果
      themeToggle.style.transform = 'scale(0.95)';
      setTimeout(() => {
        themeToggle.style.transform = '';
      }, 150);
    }

    // 初始化主题
    const savedTheme = getCurrentTheme();
    setTheme(savedTheme);

    // 监听系统主题变化
    const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
    darkModeQuery.addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        setTheme(e.matches ? 'dark' : 'light');
      }
    });

    // 添加点击事件
    themeToggle.addEventListener('click', toggleTheme);
    
    // 防止重复绑定
    themeToggle.setAttribute('data-theme-toggle-initialized', 'true');
  }

  // 立即执行或等待DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeToggle);
  } else {
    initThemeToggle();
  }
})();
</script>